// primer ejercicio con three.js
// crear una geometria teniendo en cuenta el orden de los v√©rtices
var camera, scene, renderer;
var cameraControls;
var clock = new THREE.Clock();
var ambientLight, light;


function init() {
	var canvasWidth = window.innerWidth * 0.98;
	var canvasHeight = window.innerHeight * 0.94;

	// CAMERA

	camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 80000 );
	camera.position.set(0,9,11);
	camera.lookAt(0,0,0);

	// LIGHTS

	light = new THREE.DirectionalLight( 0xFFFFFF, 0.7 );
	light.position.set( 1, 1, 1 );
	light.target.position.set(0, 0, 0);
	light.target.updateMatrixWorld()

	var ambientLight = new THREE.AmbientLight( 0x111111 );

	// RENDERER
	renderer = new THREE.WebGLRenderer( { antialias: true } );
	renderer.setSize( canvasWidth, canvasHeight );
	renderer.setClearColor( 0xAAAAAA, 1.0 );

	renderer.gammaInput = true;
	renderer.gammaOutput = true;

	// Add to DOM
	var container = document.getElementById('container');
	container.appendChild( renderer.domElement );

	// CONTROLS
	cameraControls = new THREE.OrbitControls( camera, renderer.domElement );
	cameraControls.target.set(0, 0, 0);

	scene = new THREE.Scene();
	scene.add( light );
	scene.add( ambientLight );
	// OBJECT

	//sala
	var sala1 = new THREE.Geometry();
	sala1.vertices.push( new THREE.Vector3( 1, 0, 4 ) ); 
	sala1.vertices.push( new THREE.Vector3( 11, 0, 4 ) ); 
	sala1.vertices.push( new THREE.Vector3( 11, 3.5, 4 ) ); 
	sala1.vertices.push( new THREE.Vector3( 1, 3.5, 4 ) ); 
	sala1.vertices.push( new THREE.Vector3( 1, 0, -6.5 ) ); 
	sala1.vertices.push( new THREE.Vector3( 11, 0, -6.5 ) ); 
	sala1.vertices.push( new THREE.Vector3( 11, 3.5, -6.5 ) ); 
	sala1.vertices.push( new THREE.Vector3( 1, 3.5, -6.5 ) ); 
	sala1.faces.push( new THREE.Face3( 0, 1, 2) );
	sala1.faces.push( new THREE.Face3( 2, 3, 0) );
	sala1.faces.push( new THREE.Face3( 4, 5, 6) );
	sala1.faces.push( new THREE.Face3( 6, 7, 4) );
	sala1.faces.push( new THREE.Face3( 4, 0, 3) );
	sala1.faces.push( new THREE.Face3( 3, 7, 4) );
	sala1.faces.push( new THREE.Face3( 5, 1, 2) );
	sala1.faces.push( new THREE.Face3( 2, 6, 5) );
	sala1.faces.push( new THREE.Face3( 0, 1, 5) );
	sala1.faces.push( new THREE.Face3( 5, 4, 0) );
	var material_sala1= new THREE.MeshBasicMaterial( { color: 0xDACAC1 } ); 
	var miobjeto_sala1 = new THREE.Mesh (sala1, material_sala1); 
	scene.add( miobjeto_sala1 );
	

	//tabla mesa
	var tabla_mesa1 = new THREE.Geometry();
	tabla_mesa1.vertices.push( new THREE.Vector3( 2, 0.8, 1 ) ); 
	tabla_mesa1.vertices.push( new THREE.Vector3( 10, 0.8, 1 ) ); 
	tabla_mesa1.vertices.push( new THREE.Vector3( 10, 1, 1 ) ); 
	tabla_mesa1.vertices.push( new THREE.Vector3( 2, 1, 1 ) ); 
	tabla_mesa1.vertices.push( new THREE.Vector3( 2, 0.8, 0 ) ); 
	tabla_mesa1.vertices.push( new THREE.Vector3( 10, 0.8, 0 ) ); 
	tabla_mesa1.vertices.push( new THREE.Vector3( 10, 1, 0 ) ); 
	tabla_mesa1.vertices.push( new THREE.Vector3( 2, 1, 0 ) ); 
	tabla_mesa1.faces.push( new THREE.Face3( 0, 1, 2) );
	tabla_mesa1.faces.push( new THREE.Face3( 2, 3, 0) );
	tabla_mesa1.faces.push( new THREE.Face3( 4, 5, 6) );
	tabla_mesa1.faces.push( new THREE.Face3( 6, 7, 4) );
	tabla_mesa1.faces.push( new THREE.Face3( 4, 0, 3) );
	tabla_mesa1.faces.push( new THREE.Face3( 3, 7, 4) );
	tabla_mesa1.faces.push( new THREE.Face3( 5, 1, 2) );
	tabla_mesa1.faces.push( new THREE.Face3( 2, 6, 5) );
	tabla_mesa1.faces.push( new THREE.Face3( 0, 1, 5) );
	tabla_mesa1.faces.push( new THREE.Face3( 5, 4, 0) );
	tabla_mesa1.faces.push( new THREE.Face3( 3, 2, 6) );
	tabla_mesa1.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_tabla_mesa1= new THREE.MeshBasicMaterial( { color: 0x633923 } ); 
	var miobjeto_tabla_mesa1 = new THREE.Mesh (tabla_mesa1, material_tabla_mesa1); 
	scene.add( miobjeto_tabla_mesa1 );
	

	//tabla mesa 2
	var tabla_mesa2 = new THREE.Geometry();
	tabla_mesa2.vertices.push( new THREE.Vector3( 2, 0.8, -2 ) ); 
	tabla_mesa2.vertices.push( new THREE.Vector3( 10, 0.8, -2 ) ); 
	tabla_mesa2.vertices.push( new THREE.Vector3( 10, 1, -2 ) ); 
	tabla_mesa2.vertices.push( new THREE.Vector3( 2, 1, -2 ) ); 
	tabla_mesa2.vertices.push( new THREE.Vector3( 2, 0.8, -3 ) ); 
	tabla_mesa2.vertices.push( new THREE.Vector3( 10, 0.8, -3 ) ); 
	tabla_mesa2.vertices.push( new THREE.Vector3( 10, 1, -3 ) ); 
	tabla_mesa2.vertices.push( new THREE.Vector3( 2, 1, -3 ) ); 
	tabla_mesa2.faces.push( new THREE.Face3( 0, 1, 2) );
	tabla_mesa2.faces.push( new THREE.Face3( 2, 3, 0) );
	tabla_mesa2.faces.push( new THREE.Face3( 4, 5, 6) );
	tabla_mesa2.faces.push( new THREE.Face3( 6, 7, 4) );
	tabla_mesa2.faces.push( new THREE.Face3( 4, 0, 3) );
	tabla_mesa2.faces.push( new THREE.Face3( 3, 7, 4) );
	tabla_mesa2.faces.push( new THREE.Face3( 5, 1, 2) );
	tabla_mesa2.faces.push( new THREE.Face3( 2, 6, 5) );
	tabla_mesa2.faces.push( new THREE.Face3( 0, 1, 5) );
	tabla_mesa2.faces.push( new THREE.Face3( 5, 4, 0) );
	tabla_mesa2.faces.push( new THREE.Face3( 3, 2, 6) );
	tabla_mesa2.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_tabla_mesa2= new THREE.MeshBasicMaterial( { color: 0x633923 } ); 
	var miobjeto_tabla_mesa2 = new THREE.Mesh (tabla_mesa2, material_tabla_mesa2); 
	scene.add( miobjeto_tabla_mesa2 );
	
	

	var pantalla1 = new THREE.Geometry();
	pantalla1.vertices.push( new THREE.Vector3( 3, 1, 0.6 ) ); 
	pantalla1.vertices.push( new THREE.Vector3( 4.5, 1, 0.6 ) ); 
	pantalla1.vertices.push( new THREE.Vector3( 4.5, 2, 0.6 ) ); 
	pantalla1.vertices.push( new THREE.Vector3( 3, 2, 0.6 ) ); 
	pantalla1.vertices.push( new THREE.Vector3( 3, 1, 0.4 ) ); 
	pantalla1.vertices.push( new THREE.Vector3( 4.5, 1, 0.4 ) ); 
	pantalla1.vertices.push( new THREE.Vector3( 4.5, 2, 0.4 ) ); 
	pantalla1.vertices.push( new THREE.Vector3( 3, 2, 0.4 ) ); 
	pantalla1.faces.push( new THREE.Face3( 0, 1, 2) );
	pantalla1.faces.push( new THREE.Face3( 2, 3, 0) );
	pantalla1.faces.push( new THREE.Face3( 4, 5, 6) );
	pantalla1.faces.push( new THREE.Face3( 6, 7, 4) );
	pantalla1.faces.push( new THREE.Face3( 4, 0, 3) );
	pantalla1.faces.push( new THREE.Face3( 3, 7, 4) );
	pantalla1.faces.push( new THREE.Face3( 5, 1, 2) );
	pantalla1.faces.push( new THREE.Face3( 2, 6, 5) );
	pantalla1.faces.push( new THREE.Face3( 0, 1, 5) );
	pantalla1.faces.push( new THREE.Face3( 5, 4, 0) );
	pantalla1.faces.push( new THREE.Face3( 3, 2, 6) );
	pantalla1.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_pantalla1= new THREE.MeshBasicMaterial( { color: 0x566573 } ); 
	var miobjeto_pantalla1 = new THREE.Mesh (pantalla1, material_pantalla1); 
	scene.add( miobjeto_pantalla1 );
	
	var case1 = new THREE.Geometry();
	case1.vertices.push( new THREE.Vector3( 5, 1, 0.8 ) ); 
	case1.vertices.push( new THREE.Vector3( 5.5, 1, 0.8 ) ); 
	case1.vertices.push( new THREE.Vector3( 5.5, 2, 0.8 ) ); 
	case1.vertices.push( new THREE.Vector3( 5, 2, 0.8 ) ); 
	case1.vertices.push( new THREE.Vector3( 5, 1, 0.2 ) ); 
	case1.vertices.push( new THREE.Vector3( 5.5, 1, 0.2 ) ); 
	case1.vertices.push( new THREE.Vector3( 5.5, 2, 0.2 ) ); 
	case1.vertices.push( new THREE.Vector3( 5, 2, 0.2 ) ); 
	case1.faces.push( new THREE.Face3( 0, 1, 2) );
	case1.faces.push( new THREE.Face3( 2, 3, 0) );
	case1.faces.push( new THREE.Face3( 4, 5, 6) );
	case1.faces.push( new THREE.Face3( 6, 7, 4) );
	case1.faces.push( new THREE.Face3( 4, 0, 3) );
	case1.faces.push( new THREE.Face3( 3, 7, 4) );
	case1.faces.push( new THREE.Face3( 5, 1, 2) );
	case1.faces.push( new THREE.Face3( 2, 6, 5) );
	case1.faces.push( new THREE.Face3( 0, 1, 5) );
	case1.faces.push( new THREE.Face3( 5, 4, 0) );
	case1.faces.push( new THREE.Face3( 3, 2, 6) );
	case1.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_case1= new THREE.MeshBasicMaterial( { color: 0x34495E } ); 
	var miobjeto_case1 = new THREE.Mesh (case1, material_case1); 
	scene.add( miobjeto_case1 );

	var pantalla2 = new THREE.Geometry();
	pantalla2.vertices.push( new THREE.Vector3( 6.5, 1, 0.6 ) ); 
	pantalla2.vertices.push( new THREE.Vector3( 8, 1, 0.6 ) ); 
	pantalla2.vertices.push( new THREE.Vector3( 8, 2, 0.6 ) ); 
	pantalla2.vertices.push( new THREE.Vector3( 6.5, 2, 0.6 ) ); 
	pantalla2.vertices.push( new THREE.Vector3( 6.5, 1, 0.4 ) ); 
	pantalla2.vertices.push( new THREE.Vector3( 8, 1, 0.4 ) ); 
	pantalla2.vertices.push( new THREE.Vector3( 8, 2, 0.4 ) ); 
	pantalla2.vertices.push( new THREE.Vector3( 6.5, 2, 0.4 ) ); 
	pantalla2.faces.push( new THREE.Face3( 0, 1, 2) );
	pantalla2.faces.push( new THREE.Face3( 2, 3, 0) );
	pantalla2.faces.push( new THREE.Face3( 4, 5, 6) );
	pantalla2.faces.push( new THREE.Face3( 6, 7, 4) );
	pantalla2.faces.push( new THREE.Face3( 4, 0, 3) );
	pantalla2.faces.push( new THREE.Face3( 3, 7, 4) );
	pantalla2.faces.push( new THREE.Face3( 5, 1, 2) );
	pantalla2.faces.push( new THREE.Face3( 2, 6, 5) );
	pantalla2.faces.push( new THREE.Face3( 0, 1, 5) );
	pantalla2.faces.push( new THREE.Face3( 5, 4, 0) );
	pantalla2.faces.push( new THREE.Face3( 3, 2, 6) );
	pantalla2.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_pantalla2= new THREE.MeshBasicMaterial( { color: 0x566573 } ); 
	var miobjeto_pantalla2 = new THREE.Mesh (pantalla2, material_pantalla2); 
	scene.add( miobjeto_pantalla2 );

	var case2 = new THREE.Geometry();
	case2.vertices.push( new THREE.Vector3( 8.5, 1, 0.8 ) ); 
	case2.vertices.push( new THREE.Vector3( 9, 1, 0.8 ) ); 
	case2.vertices.push( new THREE.Vector3( 9, 2, 0.8 ) ); 
	case2.vertices.push( new THREE.Vector3( 8.5, 2, 0.8 ) ); 
	case2.vertices.push( new THREE.Vector3( 8.5, 1, 0.2 ) ); 
	case2.vertices.push( new THREE.Vector3( 9, 1, 0.2 ) ); 
	case2.vertices.push( new THREE.Vector3( 9, 2, 0.2 ) ); 
	case2.vertices.push( new THREE.Vector3( 8.5, 2, 0.2 ) ); 
	case2.faces.push( new THREE.Face3( 0, 1, 2) );
	case2.faces.push( new THREE.Face3( 2, 3, 0) );
	case2.faces.push( new THREE.Face3( 4, 5, 6) );
	case2.faces.push( new THREE.Face3( 6, 7, 4) );
	case2.faces.push( new THREE.Face3( 4, 0, 3) );
	case2.faces.push( new THREE.Face3( 3, 7, 4) );
	case2.faces.push( new THREE.Face3( 5, 1, 2) );
	case2.faces.push( new THREE.Face3( 2, 6, 5) );
	case2.faces.push( new THREE.Face3( 0, 1, 5) );
	case2.faces.push( new THREE.Face3( 5, 4, 0) );
	case2.faces.push( new THREE.Face3( 3, 2, 6) );
	case2.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_case2= new THREE.MeshBasicMaterial( { color: 0x34495E } ); 
	var miobjeto_case2 = new THREE.Mesh (case2, material_case2); 
	scene.add( miobjeto_case2 );

	var pantalla3 = new THREE.Geometry();
	pantalla3.vertices.push( new THREE.Vector3( 3, 1, -2.4 ) ); 
	pantalla3.vertices.push( new THREE.Vector3( 4.5, 1, -2.4 ) ); 
	pantalla3.vertices.push( new THREE.Vector3( 4.5, 2, -2.4 ) ); 
	pantalla3.vertices.push( new THREE.Vector3( 3, 2, -2.4 ) ); 
	pantalla3.vertices.push( new THREE.Vector3( 3, 1, -2.6 ) ); 
	pantalla3.vertices.push( new THREE.Vector3( 4.5, 1, -2.6 ) ); 
	pantalla3.vertices.push( new THREE.Vector3( 4.5, 2, -2.6 ) ); 
	pantalla3.vertices.push( new THREE.Vector3( 3, 2, -2.6 ) ); 
	pantalla3.faces.push( new THREE.Face3( 0, 1, 2) );
	pantalla3.faces.push( new THREE.Face3( 2, 3, 0) );
	pantalla3.faces.push( new THREE.Face3( 4, 5, 6) );
	pantalla3.faces.push( new THREE.Face3( 6, 7, 4) );
	pantalla3.faces.push( new THREE.Face3( 4, 0, 3) );
	pantalla3.faces.push( new THREE.Face3( 3, 7, 4) );
	pantalla3.faces.push( new THREE.Face3( 5, 1, 2) );
	pantalla3.faces.push( new THREE.Face3( 2, 6, 5) );
	pantalla3.faces.push( new THREE.Face3( 0, 1, 5) );
	pantalla3.faces.push( new THREE.Face3( 5, 4, 0) );
	pantalla3.faces.push( new THREE.Face3( 3, 2, 6) );
	pantalla3.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_pantalla3= new THREE.MeshBasicMaterial( { color: 0x566573 } ); 
	var miobjeto_pantalla3 = new THREE.Mesh (pantalla3, material_pantalla3); 
	scene.add( miobjeto_pantalla3 );

	var case3 = new THREE.Geometry();
	case3.vertices.push( new THREE.Vector3( 5, 1, -2.2 ) ); 
	case3.vertices.push( new THREE.Vector3( 5.5, 1, -2.2 ) ); 
	case3.vertices.push( new THREE.Vector3( 5.5, 2, -2.2 ) ); 
	case3.vertices.push( new THREE.Vector3( 5, 2, -2.2 ) ); 
	case3.vertices.push( new THREE.Vector3( 5, 1, -2.8 ) ); 
	case3.vertices.push( new THREE.Vector3( 5.5, 1, -2.8 ) ); 
	case3.vertices.push( new THREE.Vector3( 5.5, 2, -2.8 ) ); 
	case3.vertices.push( new THREE.Vector3( 5, 2, -2.8 ) ); 
	case3.faces.push( new THREE.Face3( 0, 1, 2) );
	case3.faces.push( new THREE.Face3( 2, 3, 0) );
	case3.faces.push( new THREE.Face3( 4, 5, 6) );
	case3.faces.push( new THREE.Face3( 6, 7, 4) );
	case3.faces.push( new THREE.Face3( 4, 0, 3) );
	case3.faces.push( new THREE.Face3( 3, 7, 4) );
	case3.faces.push( new THREE.Face3( 5, 1, 2) );
	case3.faces.push( new THREE.Face3( 2, 6, 5) );
	case3.faces.push( new THREE.Face3( 0, 1, 5) );
	case3.faces.push( new THREE.Face3( 5, 4, 0) );
	case3.faces.push( new THREE.Face3( 3, 2, 6) );
	case3.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_case3= new THREE.MeshBasicMaterial( { color: 0x34495E } ); 
	var miobjeto_case3 = new THREE.Mesh (case3, material_case3); 
	scene.add( miobjeto_case3 );

	var pantalla4 = new THREE.Geometry();
	pantalla4.vertices.push( new THREE.Vector3( 6.5, 1, -2.4 ) ); 
	pantalla4.vertices.push( new THREE.Vector3( 8, 1, -2.4 ) ); 
	pantalla4.vertices.push( new THREE.Vector3( 8, 2, -2.4 ) ); 
	pantalla4.vertices.push( new THREE.Vector3( 6.5, 2, -2.4 ) ); 
	pantalla4.vertices.push( new THREE.Vector3( 6.5, 1, -2.6 ) ); 
	pantalla4.vertices.push( new THREE.Vector3( 8, 1, -2.6 ) ); 
	pantalla4.vertices.push( new THREE.Vector3( 8, 2, -2.6 ) ); 
	pantalla4.vertices.push( new THREE.Vector3( 6.5, 2, -2.6 ) ); 
	pantalla4.faces.push( new THREE.Face3( 0, 1, 2) );
	pantalla4.faces.push( new THREE.Face3( 2, 3, 0) );
	pantalla4.faces.push( new THREE.Face3( 4, 5, 6) );
	pantalla4.faces.push( new THREE.Face3( 6, 7, 4) );
	pantalla4.faces.push( new THREE.Face3( 4, 0, 3) );
	pantalla4.faces.push( new THREE.Face3( 3, 7, 4) );
	pantalla4.faces.push( new THREE.Face3( 5, 1, 2) );
	pantalla4.faces.push( new THREE.Face3( 2, 6, 5) );
	pantalla4.faces.push( new THREE.Face3( 0, 1, 5) );
	pantalla4.faces.push( new THREE.Face3( 5, 4, 0) );
	pantalla4.faces.push( new THREE.Face3( 3, 2, 6) );
	pantalla4.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_pantalla4= new THREE.MeshBasicMaterial( { color: 0x566573 } ); 
	var miobjeto_pantalla4 = new THREE.Mesh (pantalla4, material_pantalla4); 
	scene.add( miobjeto_pantalla4 );


	var case4 = new THREE.Geometry();
	case4.vertices.push( new THREE.Vector3( 8.5, 1, -2.2 ) ); 
	case4.vertices.push( new THREE.Vector3( 9, 1, -2.2 ) ); 
	case4.vertices.push( new THREE.Vector3( 9, 2, -2.2 ) ); 
	case4.vertices.push( new THREE.Vector3( 8.5, 2, -2.2 ) ); 
	case4.vertices.push( new THREE.Vector3( 8.5, 1, -2.8 ) ); 
	case4.vertices.push( new THREE.Vector3( 9, 1, -2.8 ) ); 
	case4.vertices.push( new THREE.Vector3( 9, 2, -2.8 ) ); 
	case4.vertices.push( new THREE.Vector3( 8.5, 2, -2.8 ) ); 
	case4.faces.push( new THREE.Face3( 0, 1, 2) );
	case4.faces.push( new THREE.Face3( 2, 3, 0) );
	case4.faces.push( new THREE.Face3( 4, 5, 6) );
	case4.faces.push( new THREE.Face3( 6, 7, 4) );
	case4.faces.push( new THREE.Face3( 4, 0, 3) );
	case4.faces.push( new THREE.Face3( 3, 7, 4) );
	case4.faces.push( new THREE.Face3( 5, 1, 2) );
	case4.faces.push( new THREE.Face3( 2, 6, 5) );
	case4.faces.push( new THREE.Face3( 0, 1, 5) );
	case4.faces.push( new THREE.Face3( 5, 4, 0) );
	case4.faces.push( new THREE.Face3( 3, 2, 6) );
	case4.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_case4= new THREE.MeshBasicMaterial( { color: 0x34495E } ); 
	var miobjeto_case4 = new THREE.Mesh (case4, material_case4); 
	scene.add( miobjeto_case4 );

	var pizarron1 = new THREE.Geometry();
	pizarron1.vertices.push( new THREE.Vector3( 2.5, 0.5, -6.2 ) ); 
	pizarron1.vertices.push( new THREE.Vector3( 9.5, 0.5, -6.2 ) ); 
	pizarron1.vertices.push( new THREE.Vector3( 9.5, 3, -6.2 ) ); 
	pizarron1.vertices.push( new THREE.Vector3( 2.5, 3, -6.2 ) ); 
	pizarron1.vertices.push( new THREE.Vector3( 2.5, 0.5, -6.4 ) ); 
	pizarron1.vertices.push( new THREE.Vector3( 9.5, 0.5, -6.4 ) ); 
	pizarron1.vertices.push( new THREE.Vector3( 9.5, 3, -6.4 ) ); 
	pizarron1.vertices.push( new THREE.Vector3( 2.5, 3, -6.4 ) ); 
	pizarron1.faces.push( new THREE.Face3( 0, 1, 2) );
	pizarron1.faces.push( new THREE.Face3( 2, 3, 0) );
	pizarron1.faces.push( new THREE.Face3( 4, 5, 6) );
	pizarron1.faces.push( new THREE.Face3( 6, 7, 4) );
	pizarron1.faces.push( new THREE.Face3( 4, 0, 3) );
	pizarron1.faces.push( new THREE.Face3( 3, 7, 4) );
	pizarron1.faces.push( new THREE.Face3( 5, 1, 2) );
	pizarron1.faces.push( new THREE.Face3( 2, 6, 5) );
	pizarron1.faces.push( new THREE.Face3( 0, 1, 5) );
	pizarron1.faces.push( new THREE.Face3( 5, 4, 0) );
	pizarron1.faces.push( new THREE.Face3( 3, 2, 6) );
	pizarron1.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_pizarron1= new THREE.MeshBasicMaterial( { color: 0xFBFCDF } ); 
	var miobjeto_pizarron1 = new THREE.Mesh (pizarron1, material_pizarron1); 
	scene.add( miobjeto_pizarron1 );

	var puerta1 = new THREE.Geometry();
	puerta1.vertices.push( new THREE.Vector3( 0.9, 0, -4 ) ); 
	puerta1.vertices.push( new THREE.Vector3( 1.1, 0, -4 ) ); 
	puerta1.vertices.push( new THREE.Vector3( 1.1, 3, -4 ) ); 
	puerta1.vertices.push( new THREE.Vector3( 0.9, 3, -4 ) ); 
	puerta1.vertices.push( new THREE.Vector3( 0.9, 0, -6 ) ); 
	puerta1.vertices.push( new THREE.Vector3( 1.1, 0, -6 ) ); 
	puerta1.vertices.push( new THREE.Vector3( 1.1, 3, -6 ) ); 
	puerta1.vertices.push( new THREE.Vector3( 0.9, 3, -6 ) ); 
	puerta1.faces.push( new THREE.Face3( 0, 1, 2) );
	puerta1.faces.push( new THREE.Face3( 2, 3, 0) );
	puerta1.faces.push( new THREE.Face3( 4, 5, 6) );
	puerta1.faces.push( new THREE.Face3( 6, 7, 4) );
	puerta1.faces.push( new THREE.Face3( 4, 0, 3) );
	puerta1.faces.push( new THREE.Face3( 3, 7, 4) );
	puerta1.faces.push( new THREE.Face3( 5, 1, 2) );
	puerta1.faces.push( new THREE.Face3( 2, 6, 5) );
	puerta1.faces.push( new THREE.Face3( 0, 1, 5) );
	puerta1.faces.push( new THREE.Face3( 5, 4, 0) );
	puerta1.faces.push( new THREE.Face3( 3, 2, 6) );
	puerta1.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_puerta1= new THREE.MeshBasicMaterial( { color: 0x5F4228 } ); 
	var miobjeto_puerta1 = new THREE.Mesh (puerta1, material_puerta1); 
	scene.add( miobjeto_puerta1 );

	var silla1 = new THREE.Geometry();
	silla1.vertices.push( new THREE.Vector3( 7, 0, 1.9 ) ); 
	silla1.vertices.push( new THREE.Vector3( 7.7, 0, 1.9 ) ); 
	silla1.vertices.push( new THREE.Vector3( 7.7, 0.7, 1.9 ) ); 
	silla1.vertices.push( new THREE.Vector3( 7, 0.7, 1.9 ) ); 
	silla1.vertices.push( new THREE.Vector3( 7, 0, 1.3 ) ); 
	silla1.vertices.push( new THREE.Vector3( 7.7, 0, 1.3 ) ); 
	silla1.vertices.push( new THREE.Vector3( 7.7, 0.7, 1.3 ) ); 
	silla1.vertices.push( new THREE.Vector3( 7, 0.7, 1.3 ) ); 
	silla1.faces.push( new THREE.Face3( 0, 1, 2) );
	silla1.faces.push( new THREE.Face3( 2, 3, 0) );
	silla1.faces.push( new THREE.Face3( 4, 5, 6) );
	silla1.faces.push( new THREE.Face3( 6, 7, 4) );
	silla1.faces.push( new THREE.Face3( 4, 0, 3) );
	silla1.faces.push( new THREE.Face3( 3, 7, 4) );
	silla1.faces.push( new THREE.Face3( 5, 1, 2) );
	silla1.faces.push( new THREE.Face3( 2, 6, 5) );
	silla1.faces.push( new THREE.Face3( 0, 1, 5) );
	silla1.faces.push( new THREE.Face3( 5, 4, 0) );
	silla1.faces.push( new THREE.Face3( 3, 2, 6) );
	silla1.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_silla1= new THREE.MeshBasicMaterial( { color: 0x2A1C0E } ); 
	var miobjeto_silla1 = new THREE.Mesh (silla1, material_silla1); 
	scene.add( miobjeto_silla1 );

	var silla2 = new THREE.Geometry();
	silla2.vertices.push( new THREE.Vector3( 3.5, 0, 1.9 ) ); 
	silla2.vertices.push( new THREE.Vector3( 4.2, 0, 1.9 ) ); 
	silla2.vertices.push( new THREE.Vector3( 4.2, 0.7, 1.9 ) ); 
	silla2.vertices.push( new THREE.Vector3( 3.5, 0.7, 1.9 ) ); 
	silla2.vertices.push( new THREE.Vector3( 3.5, 0, 1.3 ) ); 
	silla2.vertices.push( new THREE.Vector3( 4.2, 0, 1.3 ) ); 
	silla2.vertices.push( new THREE.Vector3( 4.2, 0.7, 1.3 ) ); 
	silla2.vertices.push( new THREE.Vector3( 3.5, 0.7, 1.3 ) ); 
	silla2.faces.push( new THREE.Face3( 0, 1, 2) );
	silla2.faces.push( new THREE.Face3( 2, 3, 0) );
	silla2.faces.push( new THREE.Face3( 4, 5, 6) );
	silla2.faces.push( new THREE.Face3( 6, 7, 4) );
	silla2.faces.push( new THREE.Face3( 4, 0, 3) );
	silla2.faces.push( new THREE.Face3( 3, 7, 4) );
	silla2.faces.push( new THREE.Face3( 5, 1, 2) );
	silla2.faces.push( new THREE.Face3( 2, 6, 5) );
	silla2.faces.push( new THREE.Face3( 0, 1, 5) );
	silla2.faces.push( new THREE.Face3( 5, 4, 0) );
	silla2.faces.push( new THREE.Face3( 3, 2, 6) );
	silla2.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_silla2= new THREE.MeshBasicMaterial( { color: 0x2A1C0E } ); 
	var miobjeto_silla2 = new THREE.Mesh (silla2, material_silla2); 
	scene.add( miobjeto_silla2 );

	var silla3 = new THREE.Geometry();
	silla3.vertices.push( new THREE.Vector3( 3.5, 0, -1.3 ) ); 
	silla3.vertices.push( new THREE.Vector3( 4.2, 0, -1.3 ) ); 
	silla3.vertices.push( new THREE.Vector3( 4.2, 0.7, -1.3 ) ); 
	silla3.vertices.push( new THREE.Vector3( 3.5, 0.7, -1.3 ) ); 
	silla3.vertices.push( new THREE.Vector3( 3.5, 0, -1.9 ) ); 
	silla3.vertices.push( new THREE.Vector3( 4.2, 0, -1.9 ) ); 
	silla3.vertices.push( new THREE.Vector3( 4.2, 0.7, -1.9 ) ); 
	silla3.vertices.push( new THREE.Vector3( 3.5, 0.7, -1.9 ) ); 
	silla3.faces.push( new THREE.Face3( 0, 1, 2) );
	silla3.faces.push( new THREE.Face3( 2, 3, 0) );
	silla3.faces.push( new THREE.Face3( 4, 5, 6) );
	silla3.faces.push( new THREE.Face3( 6, 7, 4) );
	silla3.faces.push( new THREE.Face3( 4, 0, 3) );
	silla3.faces.push( new THREE.Face3( 3, 7, 4) );
	silla3.faces.push( new THREE.Face3( 5, 1, 2) );
	silla3.faces.push( new THREE.Face3( 2, 6, 5) );
	silla3.faces.push( new THREE.Face3( 0, 1, 5) );
	silla3.faces.push( new THREE.Face3( 5, 4, 0) );
	silla3.faces.push( new THREE.Face3( 3, 2, 6) );
	silla3.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_silla3= new THREE.MeshBasicMaterial( { color: 0x2A1C0E } ); 
	var miobjeto_silla3 = new THREE.Mesh (silla3, material_silla3); 
	scene.add( miobjeto_silla3 );

	var silla4 = new THREE.Geometry();
	silla4.vertices.push( new THREE.Vector3( 7, 0, -1.3 ) ); 
	silla4.vertices.push( new THREE.Vector3( 7.7, 0, -1.3 ) ); 
	silla4.vertices.push( new THREE.Vector3( 7.7, 0.7, -1.3 ) ); 
	silla4.vertices.push( new THREE.Vector3( 7, 0.7, -1.3 ) ); 
	silla4.vertices.push( new THREE.Vector3( 7, 0, -1.9 ) ); 
	silla4.vertices.push( new THREE.Vector3( 7.7, 0, -1.9 ) ); 
	silla4.vertices.push( new THREE.Vector3( 7.7, 0.7, -1.9 ) ); 
	silla4.vertices.push( new THREE.Vector3( 7, 0.7, -1.9 ) ); 
	silla4.faces.push( new THREE.Face3( 0, 1, 2) );
	silla4.faces.push( new THREE.Face3( 2, 3, 0) );
	silla4.faces.push( new THREE.Face3( 4, 5, 6) );
	silla4.faces.push( new THREE.Face3( 6, 7, 4) );
	silla4.faces.push( new THREE.Face3( 4, 0, 3) );
	silla4.faces.push( new THREE.Face3( 3, 7, 4) );
	silla4.faces.push( new THREE.Face3( 5, 1, 2) );
	silla4.faces.push( new THREE.Face3( 2, 6, 5) );
	silla4.faces.push( new THREE.Face3( 0, 1, 5) );
	silla4.faces.push( new THREE.Face3( 5, 4, 0) );
	silla4.faces.push( new THREE.Face3( 3, 2, 6) );
	silla4.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_silla4= new THREE.MeshBasicMaterial( { color: 0x2A1C0E } ); 
	var miobjeto_silla4 = new THREE.Mesh (silla4, material_silla4); 
	scene.add( miobjeto_silla4 );


	var sala2 = new THREE.Geometry();
	sala2.vertices.push( new THREE.Vector3( -12, 0, 4 ) ); 
	sala2.vertices.push( new THREE.Vector3( -2, 0, 4 ) ); 
	sala2.vertices.push( new THREE.Vector3( -2, 3.5, 4 ) ); 
	sala2.vertices.push( new THREE.Vector3( -12, 3.5, 4 ) ); 
	sala2.vertices.push( new THREE.Vector3( -12, 0, -6.5 ) ); 
	sala2.vertices.push( new THREE.Vector3( -2, 0, -6.5 ) ); 
	sala2.vertices.push( new THREE.Vector3( -2, 3.5, -6.5 ) ); 
	sala2.vertices.push( new THREE.Vector3( -12, 3.5, -6.5 ) ); 
	sala2.faces.push( new THREE.Face3( 0, 1, 2) );
	sala2.faces.push( new THREE.Face3( 2, 3, 0) );
	sala2.faces.push( new THREE.Face3( 4, 5, 6) );
	sala2.faces.push( new THREE.Face3( 6, 7, 4) );
	sala2.faces.push( new THREE.Face3( 0, 4, 7) );
	sala2.faces.push( new THREE.Face3( 7, 3, 0) );
	sala2.faces.push( new THREE.Face3( 1, 5, 6) );
	sala2.faces.push( new THREE.Face3( 6, 2, 1) );
	sala2.faces.push( new THREE.Face3( 0, 1, 5) );
	sala2.faces.push( new THREE.Face3( 5, 4, 0) );
	var material_sala2= new THREE.MeshBasicMaterial( { color: 0xDACAC1 } ); 
	var miobjeto_sala2 = new THREE.Mesh (sala2, material_sala2); 
	scene.add( miobjeto_sala2 );

	var tabla_mesa3 = new THREE.Geometry();
	tabla_mesa3.vertices.push( new THREE.Vector3( -11, 0.8, 1 ) ); 
	tabla_mesa3.vertices.push( new THREE.Vector3( -3, 0.8, 1 ) ); 
	tabla_mesa3.vertices.push( new THREE.Vector3( -3, 1, 1 ) ); 
	tabla_mesa3.vertices.push( new THREE.Vector3( -11, 1, 1 ) ); 
	tabla_mesa3.vertices.push( new THREE.Vector3( -11, 0.8, 0 ) ); 
	tabla_mesa3.vertices.push( new THREE.Vector3( -3, 0.8, 0 ) ); 
	tabla_mesa3.vertices.push( new THREE.Vector3( -3, 1, 0 ) ); 
	tabla_mesa3.vertices.push( new THREE.Vector3( -11, 1, 0 ) ); 
	tabla_mesa3.faces.push( new THREE.Face3( 0, 1, 2) );
	tabla_mesa3.faces.push( new THREE.Face3( 2, 3, 0) );
	tabla_mesa3.faces.push( new THREE.Face3( 4, 5, 6) );
	tabla_mesa3.faces.push( new THREE.Face3( 6, 7, 4) );
	tabla_mesa3.faces.push( new THREE.Face3( 0, 4, 7) );
	tabla_mesa3.faces.push( new THREE.Face3( 7, 3, 0) );
	tabla_mesa3.faces.push( new THREE.Face3( 1, 5, 6) );
	tabla_mesa3.faces.push( new THREE.Face3( 6, 2, 1) );
	tabla_mesa3.faces.push( new THREE.Face3( 0, 1, 5) );
	tabla_mesa3.faces.push( new THREE.Face3( 5, 4, 0) );
	tabla_mesa3.faces.push( new THREE.Face3( 3, 2, 6) );
	tabla_mesa3.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_tabla_mesa3= new THREE.MeshBasicMaterial( { color: 0x633923 } ); 
	var miobjeto_tabla_mesa3 = new THREE.Mesh (tabla_mesa3, material_tabla_mesa3); 
	scene.add( miobjeto_tabla_mesa3 );

	var tabla_mesa4 = new THREE.Geometry();
	tabla_mesa4.vertices.push( new THREE.Vector3( -11, 0.8, -2 ) ); 
	tabla_mesa4.vertices.push( new THREE.Vector3( -3, 0.8, -2 ) ); 
	tabla_mesa4.vertices.push( new THREE.Vector3( -3, 1, -2 ) ); 
	tabla_mesa4.vertices.push( new THREE.Vector3( -11, 1, -2 ) ); 
	tabla_mesa4.vertices.push( new THREE.Vector3( -11, 0.8, -3 ) ); 
	tabla_mesa4.vertices.push( new THREE.Vector3( -3, 0.8, -3 ) ); 
	tabla_mesa4.vertices.push( new THREE.Vector3( -3, 1, -3 ) ); 
	tabla_mesa4.vertices.push( new THREE.Vector3( -11, 1, -3 ) ); 
	tabla_mesa4.faces.push( new THREE.Face3( 0, 1, 2) );
	tabla_mesa4.faces.push( new THREE.Face3( 2, 3, 0) );
	tabla_mesa4.faces.push( new THREE.Face3( 4, 5, 6) );
	tabla_mesa4.faces.push( new THREE.Face3( 6, 7, 4) );
	tabla_mesa4.faces.push( new THREE.Face3( 0, 4, 7) );
	tabla_mesa4.faces.push( new THREE.Face3( 7, 3, 0) );
	tabla_mesa4.faces.push( new THREE.Face3( 1, 5, 6) );
	tabla_mesa4.faces.push( new THREE.Face3( 6, 2, 1) );
	tabla_mesa4.faces.push( new THREE.Face3( 0, 1, 5) );
	tabla_mesa4.faces.push( new THREE.Face3( 5, 4, 0) );
	tabla_mesa4.faces.push( new THREE.Face3( 3, 2, 6) );
	tabla_mesa4.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_tabla_mesa4= new THREE.MeshBasicMaterial( { color: 0x633923 } ); 
	var miobjeto_tabla_mesa4 = new THREE.Mesh (tabla_mesa4, material_tabla_mesa4); 
	scene.add( miobjeto_tabla_mesa4 );

	var pantalla5 = new THREE.Geometry();
	pantalla5.vertices.push( new THREE.Vector3( -10, 1, 0.6 ) ); 
	pantalla5.vertices.push( new THREE.Vector3( -8.5, 1, 0.6 ) ); 
	pantalla5.vertices.push( new THREE.Vector3( -8.5, 2, 0.6 ) ); 
	pantalla5.vertices.push( new THREE.Vector3( -10, 2, 0.6 ) ); 
	pantalla5.vertices.push( new THREE.Vector3( -10, 1, 0.4 ) ); 
	pantalla5.vertices.push( new THREE.Vector3( -8.5, 1, 0.4 ) ); 
	pantalla5.vertices.push( new THREE.Vector3( -8.5, 2, 0.4 ) ); 
	pantalla5.vertices.push( new THREE.Vector3( -10, 2, 0.4 ) ); 
	pantalla5.faces.push( new THREE.Face3( 0, 1, 2) );
	pantalla5.faces.push( new THREE.Face3( 2, 3, 0) );
	pantalla5.faces.push( new THREE.Face3( 4, 5, 6) );
	pantalla5.faces.push( new THREE.Face3( 6, 7, 4) );
	pantalla5.faces.push( new THREE.Face3( 0, 4, 7) );
	pantalla5.faces.push( new THREE.Face3( 7, 3, 0) );
	pantalla5.faces.push( new THREE.Face3( 1, 5, 6) );
	pantalla5.faces.push( new THREE.Face3( 6, 2, 1) );
	pantalla5.faces.push( new THREE.Face3( 0, 1, 5) );
	pantalla5.faces.push( new THREE.Face3( 5, 4, 0) );
	pantalla5.faces.push( new THREE.Face3( 3, 2, 6) );
	pantalla5.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_pantalla5= new THREE.MeshBasicMaterial( { color: 0x5F6A6A } ); 
	var miobjeto_pantalla5 = new THREE.Mesh (pantalla5, material_pantalla5); 
	scene.add( miobjeto_pantalla5 );

	var case5 = new THREE.Geometry();
	case5.vertices.push( new THREE.Vector3( -8, 1, 0.8 ) ); 
	case5.vertices.push( new THREE.Vector3( -7.5, 1, 0.8 ) ); 
	case5.vertices.push( new THREE.Vector3( -7.5, 2, 0.8 ) ); 
	case5.vertices.push( new THREE.Vector3( -8, 2, 0.8 ) ); 
	case5.vertices.push( new THREE.Vector3( -8, 1, 0.2 ) ); 
	case5.vertices.push( new THREE.Vector3( -7.5, 1, 0.2 ) ); 
	case5.vertices.push( new THREE.Vector3( -7.5, 2, 0.2 ) ); 
	case5.vertices.push( new THREE.Vector3( -8, 2, 0.2 ) ); 
	case5.faces.push( new THREE.Face3( 0, 1, 2) );
	case5.faces.push( new THREE.Face3( 2, 3, 0) );
	case5.faces.push( new THREE.Face3( 4, 5, 6) );
	case5.faces.push( new THREE.Face3( 6, 7, 4) );
	case5.faces.push( new THREE.Face3( 0, 4, 7) );
	case5.faces.push( new THREE.Face3( 7, 3, 0) );
	case5.faces.push( new THREE.Face3( 1, 5, 6) );
	case5.faces.push( new THREE.Face3( 6, 2, 1) );
	case5.faces.push( new THREE.Face3( 0, 1, 5) );
	case5.faces.push( new THREE.Face3( 5, 4, 0) );
	case5.faces.push( new THREE.Face3( 3, 2, 6) );
	case5.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_case5= new THREE.MeshBasicMaterial( { color: 0x34495E } ); 
	var miobjeto_case5 = new THREE.Mesh (case5, material_case5); 
	scene.add( miobjeto_case5 );

	var pantalla6 = new THREE.Geometry();
	pantalla6.vertices.push( new THREE.Vector3( -6.5, 1, 0.6 ) ); 
	pantalla6.vertices.push( new THREE.Vector3( -5, 1, 0.6 ) ); 
	pantalla6.vertices.push( new THREE.Vector3( -5, 2, 0.6 ) ); 
	pantalla6.vertices.push( new THREE.Vector3( -6.5, 2, 0.6 ) ); 
	pantalla6.vertices.push( new THREE.Vector3( -6.5, 1, 0.4 ) ); 
	pantalla6.vertices.push( new THREE.Vector3( -5, 1, 0.4 ) ); 
	pantalla6.vertices.push( new THREE.Vector3( -5, 2, 0.4 ) ); 
	pantalla6.vertices.push( new THREE.Vector3( -6.5, 2, 0.4 ) ); 
	pantalla6.faces.push( new THREE.Face3( 0, 1, 2) );
	pantalla6.faces.push( new THREE.Face3( 2, 3, 0) );
	pantalla6.faces.push( new THREE.Face3( 4, 5, 6) );
	pantalla6.faces.push( new THREE.Face3( 6, 7, 4) );
	pantalla6.faces.push( new THREE.Face3( 0, 4, 7) );
	pantalla6.faces.push( new THREE.Face3( 7, 3, 0) );
	pantalla6.faces.push( new THREE.Face3( 1, 5, 6) );
	pantalla6.faces.push( new THREE.Face3( 6, 2, 1) );
	pantalla6.faces.push( new THREE.Face3( 0, 1, 5) );
	pantalla6.faces.push( new THREE.Face3( 5, 4, 0) );
	pantalla6.faces.push( new THREE.Face3( 3, 2, 6) );
	pantalla6.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_pantalla6= new THREE.MeshBasicMaterial( { color: 0x5F6A6A } ); 
	var miobjeto_pantalla6 = new THREE.Mesh (pantalla6, material_pantalla6); 
	scene.add( miobjeto_pantalla6 );

	var case6 = new THREE.Geometry();
	case6.vertices.push( new THREE.Vector3( -4.5, 1, 0.8 ) ); 
	case6.vertices.push( new THREE.Vector3( -4, 1, 0.8 ) ); 
	case6.vertices.push( new THREE.Vector3( -4, 2, 0.8 ) ); 
	case6.vertices.push( new THREE.Vector3( -4.5, 2, 0.8 ) ); 
	case6.vertices.push( new THREE.Vector3( -4.5, 1, 0.2 ) ); 
	case6.vertices.push( new THREE.Vector3( -4, 1, 0.2 ) ); 
	case6.vertices.push( new THREE.Vector3( -4, 2, 0.2 ) ); 
	case6.vertices.push( new THREE.Vector3( -4.5, 2, 0.2 ) ); 
	case6.faces.push( new THREE.Face3( 0, 1, 2) );
	case6.faces.push( new THREE.Face3( 2, 3, 0) );
	case6.faces.push( new THREE.Face3( 4, 5, 6) );
	case6.faces.push( new THREE.Face3( 6, 7, 4) );
	case6.faces.push( new THREE.Face3( 0, 4, 7) );
	case6.faces.push( new THREE.Face3( 7, 3, 0) );
	case6.faces.push( new THREE.Face3( 1, 5, 6) );
	case6.faces.push( new THREE.Face3( 6, 2, 1) );
	case6.faces.push( new THREE.Face3( 0, 1, 5) );
	case6.faces.push( new THREE.Face3( 5, 4, 0) );
	case6.faces.push( new THREE.Face3( 3, 2, 6) );
	case6.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_case6= new THREE.MeshBasicMaterial( { color: 0x283747 } ); 
	var miobjeto_case6 = new THREE.Mesh (case6, material_case6); 
	scene.add( miobjeto_case6 );

	var pantalla7 = new THREE.Geometry();
	pantalla7.vertices.push( new THREE.Vector3( -10, 1, -2.4 ) ); 
	pantalla7.vertices.push( new THREE.Vector3( -8.5, 1, -2.4 ) ); 
	pantalla7.vertices.push( new THREE.Vector3( -8.5, 2, -2.4 ) ); 
	pantalla7.vertices.push( new THREE.Vector3( -10, 2, -2.4 ) ); 
	pantalla7.vertices.push( new THREE.Vector3( -10, 1, -2.6 ) ); 
	pantalla7.vertices.push( new THREE.Vector3( -8.5, 1, -2.6 ) ); 
	pantalla7.vertices.push( new THREE.Vector3( -8.5, 2, -2.6 ) ); 
	pantalla7.vertices.push( new THREE.Vector3( -10, 2, -2.6 ) ); 
	pantalla7.faces.push( new THREE.Face3( 0, 1, 2) );
	pantalla7.faces.push( new THREE.Face3( 2, 3, 0) );
	pantalla7.faces.push( new THREE.Face3( 4, 5, 6) );
	pantalla7.faces.push( new THREE.Face3( 6, 7, 4) );
	pantalla7.faces.push( new THREE.Face3( 0, 4, 7) );
	pantalla7.faces.push( new THREE.Face3( 7, 3, 0) );
	pantalla7.faces.push( new THREE.Face3( 1, 5, 6) );
	pantalla7.faces.push( new THREE.Face3( 6, 2, 1) );
	pantalla7.faces.push( new THREE.Face3( 0, 1, 5) );
	pantalla7.faces.push( new THREE.Face3( 5, 4, 0) );
	pantalla7.faces.push( new THREE.Face3( 3, 2, 6) );
	pantalla7.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_pantalla7= new THREE.MeshBasicMaterial( { color: 0x5F6A6A } ); 
	var miobjeto_pantalla7 = new THREE.Mesh (pantalla7, material_pantalla7); 
	scene.add( miobjeto_pantalla7 );

	var case7 = new THREE.Geometry();
	case7.vertices.push( new THREE.Vector3( -8, 1, -2.2 ) ); 
	case7.vertices.push( new THREE.Vector3( -7.5, 1, -2.2 ) ); 
	case7.vertices.push( new THREE.Vector3( -7.5, 2, -2.2 ) ); 
	case7.vertices.push( new THREE.Vector3( -8, 2, -2.2 ) ); 
	case7.vertices.push( new THREE.Vector3( -8, 1, -2.8 ) ); 
	case7.vertices.push( new THREE.Vector3( -7.5, 1, -2.8 ) ); 
	case7.vertices.push( new THREE.Vector3( -7.5, 2, -2.8 ) ); 
	case7.vertices.push( new THREE.Vector3( -8, 2, -2.8 ) ); 
	case7.faces.push( new THREE.Face3( 0, 1, 2) );
	case7.faces.push( new THREE.Face3( 2, 3, 0) );
	case7.faces.push( new THREE.Face3( 4, 5, 6) );
	case7.faces.push( new THREE.Face3( 6, 7, 4) );
	case7.faces.push( new THREE.Face3( 0, 4, 7) );
	case7.faces.push( new THREE.Face3( 7, 3, 0) );
	case7.faces.push( new THREE.Face3( 1, 5, 6) );
	case7.faces.push( new THREE.Face3( 6, 2, 1) );
	case7.faces.push( new THREE.Face3( 0, 1, 5) );
	case7.faces.push( new THREE.Face3( 5, 4, 0) );
	case7.faces.push( new THREE.Face3( 3, 2, 6) );
	case7.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_case7= new THREE.MeshBasicMaterial( { color: 0x283747 } ); 
	var miobjeto_case7 = new THREE.Mesh (case7, material_case7); 
	scene.add( miobjeto_case7 );

	var pantalla8 = new THREE.Geometry();
	pantalla8.vertices.push( new THREE.Vector3( -6.5, 1, -2.4 ) ); 
	pantalla8.vertices.push( new THREE.Vector3( -5, 1, -2.4 ) ); 
	pantalla8.vertices.push( new THREE.Vector3( -5, 2, -2.4 ) ); 
	pantalla8.vertices.push( new THREE.Vector3( -6.5, 2, -2.4 ) ); 
	pantalla8.vertices.push( new THREE.Vector3( -6.5, 1, -2.6 ) ); 
	pantalla8.vertices.push( new THREE.Vector3( -5, 1, -2.6 ) ); 
	pantalla8.vertices.push( new THREE.Vector3( -5, 2, -2.6 ) ); 
	pantalla8.vertices.push( new THREE.Vector3( -6.5, 2, -2.6 ) ); 
	pantalla8.faces.push( new THREE.Face3( 0, 1, 2) );
	pantalla8.faces.push( new THREE.Face3( 2, 3, 0) );
	pantalla8.faces.push( new THREE.Face3( 4, 5, 6) );
	pantalla8.faces.push( new THREE.Face3( 6, 7, 4) );
	pantalla8.faces.push( new THREE.Face3( 0, 4, 7) );
	pantalla8.faces.push( new THREE.Face3( 7, 3, 0) );
	pantalla8.faces.push( new THREE.Face3( 1, 5, 6) );
	pantalla8.faces.push( new THREE.Face3( 6, 2, 1) );
	pantalla8.faces.push( new THREE.Face3( 0, 1, 5) );
	pantalla8.faces.push( new THREE.Face3( 5, 4, 0) );
	pantalla8.faces.push( new THREE.Face3( 3, 2, 6) );
	pantalla8.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_pantalla8= new THREE.MeshBasicMaterial( { color: 0x5F6A6A } ); 
	var miobjeto_pantalla8 = new THREE.Mesh (pantalla8, material_pantalla8); 
	scene.add( miobjeto_pantalla8 );

	var case8 = new THREE.Geometry();
	case8.vertices.push( new THREE.Vector3( -4.5, 1, -2.2 ) ); 
	case8.vertices.push( new THREE.Vector3( -4, 1, -2.2 ) ); 
	case8.vertices.push( new THREE.Vector3( -4, 2, -2.2 ) ); 
	case8.vertices.push( new THREE.Vector3( -4.5, 2, -2.2 ) ); 
	case8.vertices.push( new THREE.Vector3( -4.5, 1, -2.8 ) ); 
	case8.vertices.push( new THREE.Vector3( -4, 1, -2.8 ) ); 
	case8.vertices.push( new THREE.Vector3( -4, 2, -2.8 ) ); 
	case8.vertices.push( new THREE.Vector3( -4.5, 2, -2.8 ) ); 
	case8.faces.push( new THREE.Face3( 0, 1, 2) );
	case8.faces.push( new THREE.Face3( 2, 3, 0) );
	case8.faces.push( new THREE.Face3( 4, 5, 6) );
	case8.faces.push( new THREE.Face3( 6, 7, 4) );
	case8.faces.push( new THREE.Face3( 0, 4, 7) );
	case8.faces.push( new THREE.Face3( 7, 3, 0) );
	case8.faces.push( new THREE.Face3( 1, 5, 6) );
	case8.faces.push( new THREE.Face3( 6, 2, 1) );
	case8.faces.push( new THREE.Face3( 0, 1, 5) );
	case8.faces.push( new THREE.Face3( 5, 4, 0) );
	case8.faces.push( new THREE.Face3( 3, 2, 6) );
	case8.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_case8= new THREE.MeshBasicMaterial( { color: 0x283747 } ); 
	var miobjeto_case8 = new THREE.Mesh (case8, material_case8); 
	scene.add( miobjeto_case8 );

	var pizarron2 = new THREE.Geometry();
	pizarron2.vertices.push( new THREE.Vector3( -10.5, 0.5, -6.2 ) ); 
	pizarron2.vertices.push( new THREE.Vector3( -3.5, 0.5, -6.2 ) ); 
	pizarron2.vertices.push( new THREE.Vector3( -3.5, 3, -6.2 ) ); 
	pizarron2.vertices.push( new THREE.Vector3( -10.5, 3, -6.2 ) ); 
	pizarron2.vertices.push( new THREE.Vector3( -10.5, 0.5, -6.4 ) ); 
	pizarron2.vertices.push( new THREE.Vector3( -3.5, 0.5, -6.4 ) ); 
	pizarron2.vertices.push( new THREE.Vector3( -3.5, 3, -6.4 ) ); 
	pizarron2.vertices.push( new THREE.Vector3( -10.5, 3, -6.4 ) ); 
	pizarron2.faces.push( new THREE.Face3( 0, 1, 2) );
	pizarron2.faces.push( new THREE.Face3( 2, 3, 0) );
	pizarron2.faces.push( new THREE.Face3( 4, 5, 6) );
	pizarron2.faces.push( new THREE.Face3( 6, 7, 4) );
	pizarron2.faces.push( new THREE.Face3( 0, 4, 7) );
	pizarron2.faces.push( new THREE.Face3( 7, 3, 0) );
	pizarron2.faces.push( new THREE.Face3( 1, 5, 6) );
	pizarron2.faces.push( new THREE.Face3( 6, 2, 1) );
	pizarron2.faces.push( new THREE.Face3( 0, 1, 5) );
	pizarron2.faces.push( new THREE.Face3( 5, 4, 0) );
	pizarron2.faces.push( new THREE.Face3( 3, 2, 6) );
	pizarron2.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_pizarron2= new THREE.MeshBasicMaterial( { color: 0xFBFCDF } ); 
	var miobjeto_pizarron2 = new THREE.Mesh (pizarron2, material_pizarron2); 
	scene.add( miobjeto_pizarron2 );

	var puerat2 = new THREE.Geometry();
	puerat2.vertices.push( new THREE.Vector3( -2.1, 0, 3 ) ); 
	puerat2.vertices.push( new THREE.Vector3( -1.9, 0, 3 ) ); 
	puerat2.vertices.push( new THREE.Vector3( -1.9, 3, 3 ) ); 
	puerat2.vertices.push( new THREE.Vector3( -2.1, 3, 3 ) ); 
	puerat2.vertices.push( new THREE.Vector3( -2.1, 0, 1 ) ); 
	puerat2.vertices.push( new THREE.Vector3( -1.9, 0, 1 ) ); 
	puerat2.vertices.push( new THREE.Vector3( -1.9, 3, 1 ) ); 
	puerat2.vertices.push( new THREE.Vector3( -2.1, 3, 1 ) ); 
	puerat2.faces.push( new THREE.Face3( 0, 1, 2) );
	puerat2.faces.push( new THREE.Face3( 2, 3, 0) );
	puerat2.faces.push( new THREE.Face3( 4, 5, 6) );
	puerat2.faces.push( new THREE.Face3( 6, 7, 4) );
	puerat2.faces.push( new THREE.Face3( 0, 4, 7) );
	puerat2.faces.push( new THREE.Face3( 7, 3, 0) );
	puerat2.faces.push( new THREE.Face3( 1, 5, 6) );
	puerat2.faces.push( new THREE.Face3( 6, 2, 1) );
	puerat2.faces.push( new THREE.Face3( 0, 1, 5) );
	puerat2.faces.push( new THREE.Face3( 5, 4, 0) );
	puerat2.faces.push( new THREE.Face3( 3, 2, 6) );
	puerat2.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_puerat2= new THREE.MeshBasicMaterial( { color: 0x5F4228 } ); 
	var miobjeto_puerat2 = new THREE.Mesh (puerat2, material_puerat2); 
	scene.add( miobjeto_puerat2 );

	var silla5 = new THREE.Geometry();
	silla5.vertices.push( new THREE.Vector3( -9.5, 0, 1.9 ) ); 
	silla5.vertices.push( new THREE.Vector3( -8.8, 0, 1.9 ) ); 
	silla5.vertices.push( new THREE.Vector3( -8.8, 0.7, 1.9 ) ); 
	silla5.vertices.push( new THREE.Vector3( -9.5, 0.7, 1.9 ) ); 
	silla5.vertices.push( new THREE.Vector3( -9.5, 0, 1.3 ) ); 
	silla5.vertices.push( new THREE.Vector3( -8.8, 0, 1.3 ) ); 
	silla5.vertices.push( new THREE.Vector3( -8.8, 0.7, 1.3 ) ); 
	silla5.vertices.push( new THREE.Vector3( -9.5, 0.7, 1.3 ) ); 
	silla5.faces.push( new THREE.Face3( 0, 1, 2) );
	silla5.faces.push( new THREE.Face3( 2, 3, 0) );
	silla5.faces.push( new THREE.Face3( 4, 5, 6) );
	silla5.faces.push( new THREE.Face3( 6, 7, 4) );
	silla5.faces.push( new THREE.Face3( 0, 4, 7) );
	silla5.faces.push( new THREE.Face3( 7, 3, 0) );
	silla5.faces.push( new THREE.Face3( 1, 5, 6) );
	silla5.faces.push( new THREE.Face3( 6, 2, 1) );
	silla5.faces.push( new THREE.Face3( 0, 1, 5) );
	silla5.faces.push( new THREE.Face3( 5, 4, 0) );
	silla5.faces.push( new THREE.Face3( 3, 2, 6) );
	silla5.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_silla5= new THREE.MeshBasicMaterial( { color: 0x2A1C0E } ); 
	var miobjeto_silla5 = new THREE.Mesh (silla5, material_silla5); 
	scene.add( miobjeto_silla5 );

	var silla6 = new THREE.Geometry();
	silla6.vertices.push( new THREE.Vector3( -6, 0, 1.9 ) ); 
	silla6.vertices.push( new THREE.Vector3( -5.3, 0, 1.9 ) ); 
	silla6.vertices.push( new THREE.Vector3( -5.3, 0.7, 1.9 ) ); 
	silla6.vertices.push( new THREE.Vector3( -6, 0.7, 1.9 ) ); 
	silla6.vertices.push( new THREE.Vector3( -6, 0, 1.3 ) ); 
	silla6.vertices.push( new THREE.Vector3( -5.3, 0, 1.3 ) ); 
	silla6.vertices.push( new THREE.Vector3( -5.3, 0.7, 1.3 ) ); 
	silla6.vertices.push( new THREE.Vector3( -6, 0.7, 1.3 ) ); 
	silla6.faces.push( new THREE.Face3( 0, 1, 2) );
	silla6.faces.push( new THREE.Face3( 2, 3, 0) );
	silla6.faces.push( new THREE.Face3( 4, 5, 6) );
	silla6.faces.push( new THREE.Face3( 6, 7, 4) );
	silla6.faces.push( new THREE.Face3( 0, 4, 7) );
	silla6.faces.push( new THREE.Face3( 7, 3, 0) );
	silla6.faces.push( new THREE.Face3( 1, 5, 6) );
	silla6.faces.push( new THREE.Face3( 6, 2, 1) );
	silla6.faces.push( new THREE.Face3( 0, 1, 5) );
	silla6.faces.push( new THREE.Face3( 5, 4, 0) );
	silla6.faces.push( new THREE.Face3( 3, 2, 6) );
	silla6.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_silla6= new THREE.MeshBasicMaterial( { color: 0x2A1C0E } ); 
	var miobjeto_silla6 = new THREE.Mesh (silla6, material_silla6); 
	scene.add( miobjeto_silla6 );

	var silla7 = new THREE.Geometry();
	silla7.vertices.push( new THREE.Vector3( -9.5, 0, -1.3 ) ); 
	silla7.vertices.push( new THREE.Vector3( -8.8, 0, -1.3 ) ); 
	silla7.vertices.push( new THREE.Vector3( -8.8, 0.7, -1.3 ) ); 
	silla7.vertices.push( new THREE.Vector3( -9.5, 0.7, -1.3 ) ); 
	silla7.vertices.push( new THREE.Vector3( -9.5, 0, -1.9 ) ); 
	silla7.vertices.push( new THREE.Vector3( -8.8, 0, -1.9 ) ); 
	silla7.vertices.push( new THREE.Vector3( -8.8, 0.7, -1.9 ) ); 
	silla7.vertices.push( new THREE.Vector3( -9.5, 0.7, -1.9 ) ); 
	silla7.faces.push( new THREE.Face3( 0, 1, 2) );
	silla7.faces.push( new THREE.Face3( 2, 3, 0) );
	silla7.faces.push( new THREE.Face3( 4, 5, 6) );
	silla7.faces.push( new THREE.Face3( 6, 7, 4) );
	silla7.faces.push( new THREE.Face3( 0, 4, 7) );
	silla7.faces.push( new THREE.Face3( 7, 3, 0) );
	silla7.faces.push( new THREE.Face3( 1, 5, 6) );
	silla7.faces.push( new THREE.Face3( 6, 2, 1) );
	silla7.faces.push( new THREE.Face3( 0, 1, 5) );
	silla7.faces.push( new THREE.Face3( 5, 4, 0) );
	silla7.faces.push( new THREE.Face3( 3, 2, 6) );
	silla7.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_silla7= new THREE.MeshBasicMaterial( { color: 0x2A1C0E } ); 
	var miobjeto_silla7 = new THREE.Mesh (silla7, material_silla7); 
	scene.add( miobjeto_silla7 );

	var silla8 = new THREE.Geometry();
	silla8.vertices.push( new THREE.Vector3( -6, 0, -1.3 ) ); 
	silla8.vertices.push( new THREE.Vector3( -5.3, 0, -1.3 ) ); 
	silla8.vertices.push( new THREE.Vector3( -5.3, 0.7, -1.3 ) ); 
	silla8.vertices.push( new THREE.Vector3( -6, 0.7, -1.3 ) ); 
	silla8.vertices.push( new THREE.Vector3( -6, 0, -1.9 ) ); 
	silla8.vertices.push( new THREE.Vector3( -5.3, 0, -1.9 ) ); 
	silla8.vertices.push( new THREE.Vector3( -5.3, 0.7, -1.9 ) ); 
	silla8.vertices.push( new THREE.Vector3( -6, 0.7, -1.9 ) ); 
	silla8.faces.push( new THREE.Face3( 0, 1, 2) );
	silla8.faces.push( new THREE.Face3( 2, 3, 0) );
	silla8.faces.push( new THREE.Face3( 4, 5, 6) );
	silla8.faces.push( new THREE.Face3( 6, 7, 4) );
	silla8.faces.push( new THREE.Face3( 0, 4, 7) );
	silla8.faces.push( new THREE.Face3( 7, 3, 0) );
	silla8.faces.push( new THREE.Face3( 1, 5, 6) );
	silla8.faces.push( new THREE.Face3( 6, 2, 1) );
	silla8.faces.push( new THREE.Face3( 0, 1, 5) );
	silla8.faces.push( new THREE.Face3( 5, 4, 0) );
	silla8.faces.push( new THREE.Face3( 3, 2, 6) );
	silla8.faces.push( new THREE.Face3( 6, 7, 3) );
	var material_silla8= new THREE.MeshBasicMaterial( { color: 0x2A1C0E } ); 
	var miobjeto_silla8 = new THREE.Mesh (silla8, material_silla8); 
	scene.add( miobjeto_silla8 );



}

function animate() {
	window.requestAnimationFrame( animate );
	render();
}

function render() {
	var delta = clock.getDelta();
	cameraControls.update(delta);
	renderer.render( scene, camera );
}

try {
	init();
	animate();
} catch(e) {
	var errorReport = "Your program encountered an unrecoverable error, can not draw on canvas. Error was:<br/><br/>";
	$('#container').append(errorReport+e);
}
